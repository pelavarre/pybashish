Welcome to testing PyBashIsh


// FIXME: remake this into a ".md" Markdown file
// FIXME: pull the examples from help lines, run them, see changed output as regression
// FIXME: add tests of the untested new verbs

// TODO: maybe git track all of these separately
// redundantly with this huge combined file
// so this file is your glance over it all
// but Git understands better how to track the separate pieces


Contents
========

+ 1. Welcome

++ 1.1 ) Hello Bash Doc World
++ 1.2 ) PyBashIsh works like Bash

+ 2 ) Man PyBashIsh All

++ 2.1 ) ArgDoc
++ 2.2 ) Bash
++ 2.3 ) Bind
++ 2.4 ) Cal
++ 2.5 ) Cat
++ 2.6 ) Cd
++ 2.7 ) ChMod
++ 2.8 ) Cp
++ 2.9 ) Column
++ 2.10 ) CspSh
++ 2.11 ) Date
++ 2.12 ) Dd
++ 2.13 ) DocTestBash
++ 2.14 ) Echo
++ 2.15 ) Exit
++ 2.16 ) Expand
++ 2.17 ) Find
++ 2.18 ) Fmt
++ 2.19 ) Grep
++ 2.20 ) Head
++ 2.21 ) Help
++ 2.22 ) HexDump
++ 2.23 ) History
++ 2.24 ) Hostname
++ 2.25 ) Ls
++ 2.26 ) Make
++ 2.27 ) MkDir
++ 2.28 ) Mv
++ 2.29 ) Pwd
++ 2.30 ) Read
++ 2.31 ) Rm
++ 2.32 ) Sponge
++ 2.33 ) SubSh
++ 2.34 ) Tail
++ 2.35 ) Tar
++ 2.36 ) Touch
++ 2.37 ) Tr
++ 2.38 ) Watch
++ 2.39 ) Wc
++ 2.40 ) XArgs

+ 3 ) Additional tests


To refresh this table of contents, try:

    cat tests/pybashish.typescript |grep '^#'



# 1. Welcome

## 1.1 ) Hello Bash Doc World

This file is a Bash Doc Test file

This file is like a Doc Test file of Python "import doctest",
except this file is for testing Python inside Bash, not for testing Python apart from Bash

    https://docs.python.org/library/doctest.html

To run this file, try:

    bin/doctestbash.py tests/pybashish.typescript


## 1.2 ) PyBashIsh works like Bash

You can call PyBashIsh in place of Bash

PyBashIsh is bits of Bash, rewritten in the kinder Literate programming style, as Python

PyBashIsh does a few things much much better, some things just as well, and many things more poorly

    $ bin/pwd_.py
    .../pybashish
    $

    $ (echo; echo echo "'Hello, PyBashish World.'"; echo; echo help) |python3 ../pybashish/

    Pybashish 0.x.y for Linux and Mac OS Terminals
    Type "help" and press Return for more information.
    Type "exit" and press Return to quit, or press ⌃D EOF to quit

    ...@...:...$
    (pybashish) $
    (pybashish) $ echo 'Hello, PyBashish World.'
    Hello, PyBashish World.
    (pybashish) $
    (pybashish) $ help

    Python apps should introduce themselves well

    Try typing the name of the app, and adding " --help" or " -h"

    For instance:

        echo --h
        grep -h |head

    Next try one of:

        -  ..  argdoc  base64  bash  bind  cal  cat  cd  chmod  clear  column  cp  cspsh
        date  dd  doctestbash  echo  em  emacs  exit  expand  find  fmt  grep  gunzip  gzip
        head  hearme-3  help  hexdump  history  hostname  ls  make  mkdir  mv  paste  pbcopy
        pbpaste  perl  ping  pwd  pyish  read  rm  scp  sleep  sort  sponge  ssh  strings
        subsh  subsh2  tabs  tail  tar  tar2  touch  tr  unalias  vi  vim  watch  wc  which
        xargs  zcat  zsh

    Note: The "#" hash mark means ignore the following chars in the line
    Note: The ":" colon as the first word means mostly ignore the following words in the line

    (pybashish) $ ^D
    + exit 1
    $

It's a bug if it surprises you, because a bug is a thing that bother somebody who matters, and
you matter

Please tell us about it

FIXME:  test passes falsely when i delete the first words of the "Next try one of" lines


# 2 ) Man PyBashIsh All


## 2.1 ) ArgDoc

ArgDoc compiles standard Python Arg Docs into standard Python ArgParser Parsers

Compiling "/dev/null" gives you an Arg Doc that works, to start with

    $ bin/argdoc.py -ijk
    usage: argdoc.py [-h] [-q] [-v] [--rip SHRED] [FILE] [-- [WORD [WORD ...]]]
    argdoc.py: error: unrecognized arguments: -ijk
    + exit 2
    $

    $ bin/argdoc.py
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    usage: null [-h]

    do good stuff

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      Oh no! No examples disclosed!! 💥 💔 💥
    """


    import __main__
    import argparse
    import sys


    def main(argv):
        """Run a command line"""

        doc = __main__.__doc__

        prog = doc.strip().splitlines()[0].split()[1]
        description = list(_ for _ in doc.strip().splitlines() if _)[1]
        epilog_at = doc.index("examples:")
        epilog = doc[epilog_at:]

        parser = argparse.ArgumentParser(  # copied from '/dev/null' by 'argdoc.py'
            prog=prog,
            description=description,
            add_help=True,
            formatter_class=argparse.RawTextHelpFormatter,
            epilog=epilog,
        )

        args = parser.parse_args(argv[1:])
        sys.stderr.write("{}\n".format(args))

        main.args = args
        main.parser = parser

        sys.stderr.write("{}\n".format(parser.format_usage().rstrip()))
        sys.stderr.write("null: error: not implemented\n")
        sys.exit(2)  # exit 2 from rejecting usage


    if __name__ == "__main__":
        sys.exit(main(sys.argv))
    $

    $ bin/argdoc.py /dev/null x y z
    usage: argdoc.py [-h] [-q] [-v] [--rip SHRED] [FILE] [-- [WORD [WORD ...]]]
    argdoc.py: error: unrecognized args: 'x y z', in place of '-- x y z'
    + exit 2
    $

    $ rm -fr bin/p.py
    $

    $ bin/argdoc.py --rip doc /dev/null >/dev/null
    $

    $ bin/argdoc.py --rip argdoc /dev/null >bin/p.py
    $ python3 bin/p.py
    Namespace()
    usage: null [-h]
    null: error: not implemented
    + exit 2
    $

    $ bin/argdoc.py --rip argparse /dev/null >bin/p.py
    $ python3 bin/p.py
    Namespace()
    usage: null [-h]
    null: error: not implemented
    + exit 2
    $

    $ rm -fr bin/p.py
    $

Drop that starter Doc and Python into your source, call it, and work it up from there


## 2.2 ) Bash

Do nothing, but noisily

    $ bin/bash.py
    usage: bash.py [-h] [-i]
    error: choose --interact
    + exit 2
    $

Decline to do the most basic non-interactive thing

    $ bin/bash.py -c 'echo Hello Bash World'
    usage: bash.py [-h] [-i]
    bash.py: error: unrecognized arguments: -c echo Hello Bash World
    + exit 2
    $


## 2.3 ) Bind

Give help for the keystrokes of the "bin/read.py" command line editor

    $ bin/bind.py -p
    "\C-?": drop-char
    "\C-h": drop-char
    "\C-u": drop-line
    "\C-d": drop-next-char
    "\C-w": drop-word
    "":     end-input
    "\C-j": end-line
    "\C-m": end-line
    "\C-n": next-history
    "\e[B": next-history
    "\C-p": previous-history
    "\e[A": previous-history
    "\C-v": quoted-insert
    "\C-c": raise-keyboard-interrupt
    "\C-r": reprint
    "\C-g": ring-bell
    None:   self-insert
    $

    $ git grep 'd'rop.next.char |'grep' def |'grep' '^bin/read.py:'
    bin/read.py:    def _drop_next_char(self, stdin):
    $


## 2.4 ) Cal

    $ bin/cal.py -h 19700101

       December 1969
    Mo Tu We Th Fr Sa Su
            ...
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31

        January 1970
    Mo Tu We Th Fr Sa Su
              1  2  3  4
     5  6  7  8  9 10 11
    12 13 14 15 16 17 18
            ...

    $


## 2.5 ) Cat

    $ echo a b c |tr ' ' '\n' |bin/cat.py -  # pass stdin through to stdout
    a
    b
    c
    $

    $ (echo a; echo b; echo c) |cat -n |bin/cat.py -etv  # show \t as \t and \n as \n
         1\ta\n
         2\tb\n
         3\tc\n
    $

    $ echo echo \$\''\x5A\xC2\xA0'\' |bash |bin/cat.py -tv  # do show even &nbsp; Non-Break Space as nonprinting
    Z\xC2\xA0
    $


## 2.6 ) Cd

    $ bin/cd.py  # go home
    /...
    $

    $ cd . && cd . && cd -
    /...
    $ cd . && cd . && bin/cd.py -  # go back
    cd.py: error: new dir is old dir
    + exit 1
    $

    $ bin/cd.py ~  # go home by name
    /...
    $

    $ bin/cd.py /  # go to top
    /...
    $

    $ bin/cd.py .  # go to nowhere different
    /...
    $

    $ bin/cd.py ..  # go up
    /...
    $

    $ bin/cd.py two places
    usage: cd.py [-h] [DIR]
    cd.py: error: unrecognized arguments: places
    + exit 2
    $


## 2.7 ) ChMod

    $ bin/chmod.py
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: the following arguments are required: MODE, TOP
    + exit 2
    $

    $ bin/chmod.py -R ugo+rw /dev/null
    Namespace(mode='ugo+rw', tops=['/dev/null'], recursive=1)
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: not implemented
    + exit 2
    $

    $ bin/chmod.py ugo+rw /dev/null -R
    Namespace(mode='ugo+rw', tops=['/dev/null'], recursive=1)
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: not implemented
    + exit 2
    $

    $ bin/chmod.py -rw /dev/null
    Namespace(mode='-rw', tops=['/dev/null'], recursive=0)
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: not implemented
    + exit 2
    $

    $ bin/chmod.py +rw /dev/null
    Namespace(mode='+rw', tops=['/dev/null'], recursive=0)
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: not implemented
    + exit 2
    $

    $ bin/chmod.py =rw /dev/null
    Namespace(mode='=rw', tops=['/dev/null'], recursive=0)
    usage: chmod.py [-h] [-R] MODE [TOP [TOP ...]]
    chmod.py: error: not implemented
    + exit 2
    $


## 2.8 ) Cp

    $ rm -f f.file*
    $
    $ touch f.file
    $
    
    $ bin/cp.py f.file  # call once
    + cp -ipR f.file f.file~
    + touch f.file~
    $
    $ bin/cp.py f.file  # call again
    + cp -ipR f.file f.file~2~
    + touch f.file~2~
    $
    
    $ rm f.file f.file~ f.file~2~
    $


## 2.9 ) Column

Left-justify columns of words

    $ bin/echo.py 'su per ca $ li fra gil $ is tic ex $ pi a li $ doc ious' |tr '$' '\n' |bin/column.py -t
    su   per   ca
    li   fra   gil
    is   tic   ex
    pi   a     li
    doc  ious
    $

Right-justify columns of numbers

    $ bin/echo.py '27 735 43 $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' |tr '$' '\n' |bin/column.py -t
     27   735   43
     51   785  640
     23   391   62
     14     6   19
    002  8809
    $

Call a column numeric when two-thirds of its cells contain decimal digits

    $ bin/echo.py 'su per ca $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' |tr '$' '\n' |bin/column.py -t
     su   per  ca
     51   785  640
     23   391  62
     14     6  19
    002  8809
    $


## 2.10 ) CspSh

    // is a shell prompt we don't interpret lately

    // bin/echo.py 'tick → STOP$tick → tick → STOP$CLOCK = (tick → CLOCK)$CLOCK' |tr '$' '\n' |bin/cspsh.py -qi

    ??  tick → STOP
    ⟨tick, STOP⟩

    ??  tick → tick → STOP
    ⟨tick, tick, STOP⟩

    ??  CLOCK = (tick → CLOCK)

    ??  CLOCK
    ⟨tick, tick, tick, CLOCK, ...⟩

    ??

    //


## 2.11 ) Date

    $ bin/date.py -j 123123591970.59123456
    1970-12-31 23:59:59.123456
    $ bin/date.py --date '1970-12-31 23:59:59.123456'
    1970-12-31 23:59:59.123456
    $


## 2.12 ) Dd

    $ bin/dd.py </dev/null

    dd.py: Press ⌃T SIGINFO to see progress, a la Linux:  killall -SIGUSR1 python3
    dd.py: Press ⌃Z to pause, and then tell Bash to 'fg' to resume
    dd.py: Press ⌃C SIGINT to quit, press ⌃\ SIGQUIT if you really mean it
    Press ⌃D EOF to quit

    dd.py: ⌃D EOF
    $


## 2.13 ) DocTestBash

    % bin/doctestbash.py /dev/null
    doctestbash.py: 0 tests passed at:  /dev/null
    %


## 2.14 ) Echo

    $ bin/echo.py 'Hello, Echo World!'
    Hello, Echo World!
    $

    $ bin/echo.py --v 'Hello, Echo World!'
    ['Hello, Echo World!']
    Hello, Echo World!
    $


## 2.15 ) Exit

    $ bin/exit.py
    $

    $ bin/exit.py 0
    $

    $ bin/exit.py 1
    + exit 1
    $

    $ bin/exit.py -1
    + exit 255
    $

    $ bin/exit.py 256  # alias of zero
    exit.py: error: returning 256 as 0
    $

    $ exit 256
    $

    $ bin/exit.py 258
    exit.py: error: returning 258 as 2
    + exit 2
    $

    $ exit 258
    + exit 2
    $


## 2.16 ) Expand

    $ bin/expand.py - </dev/null
    $

    $ echo echo \$\''\xC0\x80'\' |bash |bin/expand.py |bin/hexdump.py  # x EF BF BD = uFFFD = Unicode Replacement chars
    0000000 ef bf bd ef bf bd 0a
    0000007
    $

    $ echo echo -n \$\''t\tr\rn\n'\' |bash |bin/expand.py |bin/cat.py -etv
    t       r\n
    n\n
    $

    $ echo 'åéîøü←↑→↓⇧⋮⌃⌘⌥💔💥😊😠😢' |bin/expand.py  # no change
    åéîøü←↑→↓⇧⋮⌃⌘⌥💔💥😊😠😢
    $

    $ echo 'åéîøü←↑→↓⇧⋮⌃⌘⌥💔💥😊😠😢' |bin/expand.py --repr  # such as "\u22EE" for "⋮" vertical ellipsis
    \u00E5\u00E9\u00EE\u00F8\u00FC\u2190\u2191\u2192\u2193\u21E7\u22EE\u2303\u2318\u2325\u0001F494\u0001F4A5\u0001F60A\u0001F620\u0001F622
    $

    $ echo echo -n \$\''\xC2\xA0 « » “ ’ ” – — ′ ″ ‴ '\' |bash |bin/expand.py |bin/hexdump.py --chars  # common 'smart' chars
    0000000   20 20 22 20 22 20 22 20 27 20 22 20 2D 20 2D 2D  |  " " " ' " - --|
    0000010   20 27 20 27 27 20 27 27 27 0A                    | ' '' '''Ċ|
    000001A
    $

    $ echo 'import sys$if sys.stdout.isatty():$    print("isatty")$' |tr '$' '\n' |bin/expand.py --wiki
    <p>
    <code>import&nbsp;sys</code><br></br>
    <code>if&nbsp;sys.stdout.isatty():</code><br></br>
    <code>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;isatty&quot;)</code><br></br>
    </p>
    $


## 2.17 ) Find

    $ bin/find.py /dev/null
    /dev/null
    $

    $ rm -fr finddir/
    $

    $ bin/mkdir.py -p finddir/a/b/c finddir/p/q/r
    $ bin/echo.py hello >finddir/a/b/d
    $ bin/echo.py goodbye > finddir/a/b/e
    $

    $ bin/find.py finddir/
    finddir
    finddir/a
    finddir/p
    finddir/a/b
    finddir/a/b/d
    finddir/a/b/e
    finddir/a/b/c
    finddir/p/q
    finddir/p/q/r
    $

    $ rm -fr finddir/
    $


## 2.18 ) Fmt


Sketch the idea of Fmt

    $ bin/echo.py 'a b  c  d e f g  h i j   k  l m' |bin/fmt.py -9  # keep blanks except at joins and splits
    a b  c  d
    e f g  h
    i j   k
    l m
    $

    $ bin/echo.py '  a b c$  d e f$  g$$h' |tr '$' '\n' |bin/fmt.py -9  # group by common indents
      a b c d
      e f g

    h
    $

    $ bin/echo.py '   a b c' |bin/fmt.py -1  # forward indentation wider than wanted, if present
       a
       b
       c
    $

Show Fmt working with a wider terminal

    $ bin/echo.py $(seq 0 39) |bin/fmt.py -42  # split to fit inside width
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 38 39
    $

    $ bin/echo.py $(seq 0 39) |tr -d ' ' |bin/fmt.py -42  # no split at width
    0123456789101112131415161718192021222324252627282930313233343536373839
    $

    $ bin/echo.py su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious |bin/fmt.py -42  # no split at "-" dashes
    su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious
    $

Show the ruler

    $ bin/fmt.py --ruler -w72  # ends in column 72
    _2345678_0123456_8901234_6789012_4567890 2345678_0123456_8901234_6789012
    $


## 2.19 ) Grep

    $ ls bin/grep.py
    bin/grep.py
    $


## 2.20 ) Head

    $ bin/head.py
    Namespace(files=[], lines=None)
    usage: head.py [-h] [-n COUNT] [FILE [FILE ...]]
    head.py: error: not implemented
    + exit 2
    $


## 2.21 ) Help

    $ bin/help.py help
    usage: help.py [-h] [VERB]

    print some help

    positional arguments:
      VERB        a verb to explain, such as "grep" or "echo"

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      help.py
      help.py fmt  # calls out to:  fmt.py --help
      man bash
      man zshall
    $


## 2.22 ) HexDump

    $ bin/echo.py -n hexdump.py |bin/hexdump.py  # classic eight-bit groups
    0000000 68 65 78 64 75 6d 70 2e 70 79
    000000a
    $

    $ bin/echo.py -n hexdump.py |hexdump -C
    00000000  68 65 78 64 75 6d 70 2e  70 79                    |hexdump.py|
    0000000a
    $

    $ bin/echo.py -n hexdump.py |bin/hexdump.py -C  # classic shorthand meaning --bytes 1
    0000000   68 65 78 64 75 6d 70 2e  70 79                    |hexdump.py|
    000000a
    $

    $ bin/echo.py -n hexdump.py |bin/hexdump.py --c  # new shorthand meaning --charset utf-8
    0000000   68 65 78 64 75 6D 70 2E 70 79                    |hexdump.py|
    000000A
    $

    $ bin/echo.py -n 0123456789abcdef |bin/hexdump.py --bytes 4 -C  # quads
    0000000   30_31_32_33 34_35_36_37 38_39_61_62 63_64_65_66  | 0123 4567 89ab cdef |
    0000010
    $

    $ echo echo -n \$\''ijk\xC0\x80nop'\' |bash |bin/hexdump.py --chars  # overlong encoding, aka non-shortest form utf-8
    0000000   69 6A 6B C0 80 6E 6F 70                          |ijkÀƀnop|
    0000008
    $

    $ bin/echo.py -n 'åéîøü←↑→↓⇧⌃⌘⌥💔💥😊😠😢' |bin/hexdump.py --chars  # common non-ascii
    0000000   C3 A5 C3 A9 C3 AE C3 B8 C3 BC E2 86 90 E2 86 91  |å é î ø ü ←  ↑  |
    0000010   E2 86 92 E2 86 93 E2 87 A7 E2 8C 83 E2 8C 98 E2  |→  ↓  ⇧  ⌃  ⌘  ⌥|
    0000020   8C A5 F0 9F 92 94 F0 9F 92 A5 F0 9F 98 8A F0 9F  |  💔   💥   😊   😠 |
    0000030   98 A0 F0 9F 98 A2                                |  😢   |
    0000036
    $

    $ bin/hexdump.py --dump-byteset |bin/hexdump.py --chars
    0000000   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  |ĀāĂăĄąĆćĈĉĊċČčĎď|
    0000010   10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F  |ĐđĒēĔĕĖėĘęĚěĜĝĞğ|
    0000020   20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F  | !"#$%&'()*+,-./|
    0000030   30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F  |0123456789:;<=>?|
    0000040   40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F  |@ABCDEFGHIJKLMNO|
    0000050   50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F  |PQRSTUVWXYZ[\]^_|
    0000060   60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F  |`abcdefghijklmno|
    0000070   70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F  |pqrstuvwxyz{|}~ſ|
    0000080   80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F  |ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ|
    0000090   90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F  |ƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟ|
    00000A0   A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF  |Ơ¡¢£¤¥¦§¨©ª«¬ƭ®¯|
    00000B0   B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF  |°±²³´µ¶·¸¹º»¼½¾¿|
    00000C0   C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF  |ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏ|
    00000D0   D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF  |ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß|
    00000E0   E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF  |àáâãäåæçèéêëìíîï|
    00000F0   F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF  |ðñòóôõö÷øùúûüýþÿ|
    0000100
    $

    $ bin/hexdump.py /dev/null  # visibly empty
    0000000
    $


## 2.23 ) History

    $ bin/echo.py 'echo abc$echo def$history$' |tr '$' '\n' |bin/bash.py -i

    Pybashish 0.x.y for Linux and Mac OS Terminals
    Type "help" and press Return for more information.
    Type "exit" and press Return to quit, or press ⌃D EOF to quit

    ...@...:...$
    (pybashish) $ echo abc
    abc
    (pybashish) $ echo def
    def
    (pybashish) $ history
        1  echo abc
        2  echo def
        3  history
    (pybashish) $
    (pybashish) $ ^D
    + exit 1
    $


## 2.24 ) Hostname

    $ bin/hostname.py
    ...
    $ bin/hostname.py --short
    ...
    $ bin/hostname.py --fqdn
    ...
    $


## 2.25 ) Ls

List the files and dirs inside a dir

    $ rm -fr lsdir/
    $

    $ bin/mkdir.py -p lsdir/dir
    $ bin/touch.py lsdir/execable
    $ chmod +x lsdir/execable
    $ bin/touch.py lsdir/file
    $ ln -s "$PWD"/lsdir/file lsdir/link
    $

    $ (cd lsdir/ && ../bin/ls.py -C)
    dir  execable  file  link
    $

    $ (cd lsdir/ && COLUMNS=1 ../bin/ls.py -C)
    dir
    execable
    file
    link
    $

    $ (cd lsdir/ && ../bin/ls.py -CF)
    dir/  execable*  file  link@
    $

    $ (cd lsdir/ && ../bin/ls.py -1)
    dir
    execable
    file
    link
    $

    $ (cd lsdir/ && ../bin/ls.py -al)
    drwxr-xr-x  .  .  .  .  ...  .
    drwxr-xr-x  .  .  .  .  ...  ..
    drwxr-xr-x  .  .  .  .  ...  dir
    -rwxr-xr-x  .  .  .  0  ...  execable
    -rw-r--r--  .  .  .  0  ...  file
    -rw-r--r--  .  .  .  0  ...  link
    $

    $ (cd lsdir/ && ../bin/ls.py -l)
    drwxr-xr-x  .  .  .  .  ...  dir
    -rwxr-xr-x  .  .  .  0  ...  execable
    -rw-r--r--  .  .  .  0  ...  file
    -rw-r--r--  .  .  .  0  ...  link
    $

    $ (cd lsdir/ && ../bin/ls.py -CFr)
    link@  file  execable*  dir/
    $ (cd lsdir/ && ../bin/ls.py -CF --sort=name --ascending)
    dir/  execable*  file  link@
    $ (cd lsdir/ && ../bin/ls.py -CF --sort=name --descending)
    link@  file  execable*  dir/
    $

Sort by time and sort by size

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/first
    $ bin/touch.py lsdir/second
    $ bin/touch.py lsdir/third
    $ bin/echo.py a >lsdir/a
    $ bin/echo.py abb >lsdir/abb
    $ bin/echo.py abbccc >lsdir/abbccc
    $

    $ (cd lsdir/ && ../bin/ls.py -Ct)
    abbccc  abb  a  third  second  first
    $ (cd lsdir/ && ../bin/ls.py -C --sort=time -r)
    first  second  third  a  abb  abbccc
    $

    $ (cd lsdir/ && ../bin/ls.py -CS)
    abbccc  abb  a  first  second  third
    $ (cd lsdir/ && ../bin/ls.py -C --sort=size -r)
    first  second  third  a  abb  abbccc
    $

Sort by ext and by version

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/1z.zip
    $ bin/touch.py lsdir/2p.py
    $ bin/touch.py lsdir/3c.c
    $ bin/touch.py lsdir/4q.py

    $ (cd lsdir/ && ../bin/ls.py -CX)
    3c.c  2p.py  4q.py  1z.zip
    $ (cd lsdir/ && ../bin/ls.py -C --sort=ext -r)
    1z.zip  2p.py  4q.py  3c.c
    $

Sort by version

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/3.10.py
    $ bin/touch.py lsdir/3.2.1.py
    $ bin/touch.py lsdir/3.2.9.py
    $ bin/touch.py lsdir/3.py
    $ bin/touch.py lsdir/c.c
    $ bin/touch.py lsdir/z.zip
    $

    $ (cd lsdir/ && ../bin/ls.py -Cv)
    c.c  z.zip  3.py  3.2.1.py  3.2.9.py  3.10.py
    $ (cd lsdir/ && ../bin/ls.py -C --sort=version -r)
    3.10.py  3.2.9.py  3.2.1.py  3.py  z.zip  c.c
    $

Clean up

    $ rm -fr lsdir/
    $


## 2.26 ) Make

    $ bin/make.py </dev/null
    usage: make.py [-h]
    make.py: error: not implemented
    + exit 2
    $


## 2.27 ) MkDir

    $ rm -fr x y z
    $

    $ bin/mkdir.py x/11 y/21 z/31
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'x/11'
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'y/21'
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'z/31'
    + exit 1
    $
    $ bin/mkdir.py -p x/11 y/21 z/31
    $

    $ bin/touch.py x/11/ y/21/ y/22 z/31/ z/32 z/33
    $

    $ bin/ls.py -dCF x/* y/* z/*
    x/11/  y/21/  y/22  z/31/  z/32  z/33
    $

    $ rm -fr x y z
    $


## 2.28 ) Mv

    $ bin/mv.py
    Namespace(file=None, i=0)
    usage: mv.py [-h] [-i] [FILE]
    mv.py: error: not implemented
    + exit 2
    $

    $ bin/mv.py f.file
    Namespace(file='f.file', i=0)
    usage: mv.py [-h] [-i] [FILE]
    mv.py: error: not implemented
    + exit 2
    $


## 2.29 ) Pwd

    $ bin/pwd_.py
    ...
    $ bin/pwd_.py -P
    ...
    $ bin/pwd_.py --brief
    ...
    $ bin/pwd_.py --home
    ...
    $


## 2.30 ) Read

    $ bin/echo.py 'Hello, Line Editor' |bin/read.py -e
    ? Hello, Line Editor
    'Hello, Line Editor\n'
    $

    $ bin/echo.py 'Hello, ^ULine Editor' |sed 's,\^U,@,g' |tr '@' '\25' |bin/read.py -e
    ? Line Editor
    'Line Editor\n'
    $

    $ bin/echo.py '⌃ ⌥ ⇧ ⌘ ← → ↓ ↑' |tr -d '\n' |bin/read.py -e
    ? ⌃ ⌥ ⇧ ⌘ ← → ↓ ↑
    '⌃ ⌥ ⇧ ⌘ ← → ↓ ↑'
    $


## 2.31 ) Rm

    $ bin/rm.py
    Namespace(files=[])
    usage: rm.py [-h] [FILE [FILE ...]]
    rm.py: error: not implemented
    + exit 2
    $


## 2.32 ) Sponge

    $ rm -fr t.txt
    $

    $ echo one >t.txt && cat t.txt
    one
    $

    $ echo two |bin/sponge.py t.txt && cat t.txt
    two
    $

    $ cat t.txt |bin/sponge.py t.txt && cat t.txt
    two
    $

    $ echo three |bin/sponge.py -a t.txt && cat t.txt
    two
    three
    $

    $ rm -fr t.txt
    $


## 2.33 ) SubSh

    $ bin/subsh.py echo 'Hello, Subsh World!'
    {'args': ['echo', 'Hello, Subsh World!'],
     'returncode': 0,
     'stderr': b'',
     'stdout': b'Hello, Subsh World!\n'}
    $

    $ python2 bin/subsh2.py echo 'Hello, Subsh World!'
    {'args': ['echo', 'Hello, Subsh World!'],
     'returncode': 0,
     'stderr': '',
     'stdout': 'Hello, Subsh World!\n'}
    $


## 2.34 ) Tail

    $ bin/tail.py
    Namespace(files=[], F=0, follow=0, retry=0, lines=None)
    usage: tail.py [-h] [-F] [-f] [--retry] [-n COUNT] [FILE [FILE ...]]
    tail.py: error: not implemented
    + exit 2
    $


## 2.35 ) Tar

    $ rm -fr tardir/ tardir.tgz
    $

    $ bin/mkdir.py -p tardir/a/b/c tardir/p/q/r
    $ bin/echo.py hello >tardir/a/b/d
    $ bin/echo.py goodbye > tardir/a/b/e
    $ tar czf tardir.tgz tardir/  # ordered differently at Mac, at Linux
    $

    $ rm -fr tardir/
    $

    $ bin/tar.py tvf tardir.tgz >/dev/null 2>&1
    $ bin/tar.py tvf /dev/null/child -tvf tardir.tgz 2>&1 |sort
    tardir/
    tardir/a/
    tardir/a/b/
    tardir/a/b/c/
    tardir/a/b/d
    tardir/a/b/e
    tardir/p/
    tardir/p/q/
    tardir/p/q/r/
    $

    $ bin/tar.py xvkf tardir.tgz 2>&1 |grep -v '^tardir/' |wc
           2       2      14
    $

    $ python2 bin/tar2.py tvf /dev/null/child -tvf tardir.tgz 2>/dev/null
    $ python2 bin/tar2.py xvkf tardir.tgz >/dev/null 2>&1
    $

    $ rm -fr tardir.tgz
    $


## 2.36 ) Touch

    $ rm -fr x y z
    $

    $ bin/mkdir.py x
    $

    $ bin/touch.py x y z
    $

    $ bin/ls.py -dCF x y z
    x/  y  z
    $

    $ rm -fr x y z
    $


## 2.37 ) Tr

    $ bin/cat.py $(git ls-files |grep '[.]py$') |bin/tr.py |awk '{gsub(/[0Aa]/, "\n&");gsub(/[~]/, "&\n")} //'

     !"#$%&'()*+,-./
    0123456789:;<=>?@
    ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`
    abcdefghijklmnopqrstuvwxyz{|}~
    £«¬µ»Âåçéîñøüαμπ–—’“”•′″‴←↑→↓⇒⇥⇧∀∃∈∎∧∨≠≡≤≥⊆⋮⌃⌘⌥⌫⎋⏎␢␣⟨⟩💔💥😊😠😢
    $

    "µ" is "\u00B5" micro-sign
    "μ" is "\u03BC" greek small-letter-mu
    etc

## 2.38 ) Watch

    $ bin/watch.py
    Namespace(words=[], interval=None)
    usage: watch.py [-h] [-n SECS] [WORD [WORD ...]]
    watch.py: error: not implemented
    + exit 2
    $


## 2.39 ) Wc

    $ bin/wc.py
    Namespace(files=[], max_line_length=0, lines=0, chars=0, bytes=0)
    usage: wc.py [-h] [-L] [-l] [-m] [-c] [FILE [FILE ...]]
    wc.py: error: not implemented
    + exit 2
    $


## 2.40 ) XArgs

Join words of lines into one line

    $ bin/echo.py 'a  b  c$  d  e$$f  g$' |tr '$' '\n' |bin/xargs.py
    a b c d e f g
    $

Split words of lines into one word per line

    $ bin/echo.py a b c |bin/xargs.py -n 1
    a
    b
    c
    $


## 3 ) Additional tests

Show every verb called with no args returns exit 0,
else exit status 2 from rejecting usage,
else exit status 2 from being stubbed out

    $ : - .. #
    $

    $ bin/argdoc.py </dev/null >/dev/null 2>&1
    $ bin/bash.py >/dev/null 2>&1
    + exit 2
    $ bin/bind.py </dev/null >/dev/null 2>&1
    $ bin/cal.py </dev/null >/dev/null 2>&1
    $ bin/cat.py </dev/null >/dev/null 2>&1
    $ bin/cd.py </dev/null >/dev/null 2>&1
    $ bin/chmod.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/column.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/cp.py /dev/null </dev/null >/dev/null 2>&1
    $ rm null
    $ : TODO: think deeper into Cp Py with No Args picks up Last Modified File
    $

    $ bin/cspsh.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/date.py </dev/null >/dev/null 2>&1
    $ bin/dd.py </dev/null >/dev/null 2>&1
    $ bin/doctestbash.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/echo.py </dev/null >/dev/null 2>&1
    $ bin/exit.py </dev/null >/dev/null 2>&1
    $ bin/expand.py </dev/null >/dev/null 2>&1
    $ bin/find.py </dev/null >/dev/null 2>&1
    $ bin/fmt.py </dev/null >/dev/null 2>&1
    $ : bin/grep.py </dev/null >/dev/null 2>&1  : FIXME: rebuild this table
    $ bin/head.py </dev/null >/dev/null 2>&1
    + exit 2

    $
    $ bin/help.py </dev/null >/dev/null 2>&1
    $ bin/hexdump.py </dev/null >/dev/null 2>&1
    $ : history
    $

    $ bin/hostname.py </dev/null >/dev/null 2>&1
    $ bin/ls.py </dev/null >/dev/null 2>&1
    $ bin/make.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/mkdir.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/mv.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ python2 bin/pyish.py
    $

    $ bin/pwd_.py </dev/null >/dev/null 2>&1
    $ bin/read.py </dev/null >/dev/null 2>&1
    $ bin/rm.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/subsh.py </dev/null >/dev/null 2>&1
    $ python2 bin/subsh2.py </dev/null >/dev/null 2>&1
    $ bin/tail.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/tar.py </dev/null >/dev/null 2>&1
    $ python2 bin/tar2.py </dev/null >/dev/null 2>&1
    $ bin/touch.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/tr.py </dev/null >/dev/null 2>&1
    $ bin/watch.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/wc.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/xargs.py </dev/null >/dev/null 2>&1
    $

Test an optional argument spelled differently than:  -h, --help
that still calls for automagic "show this help message and exit"

    $ rm -fr bin/p.py
    $

    $ bin/argdoc.py --rip doc bin/cal.py >/dev/null
    $

    $ bin/argdoc.py --rip argparse bin/cal.py >bin/p.py
    $ python3 bin/p.py
    Namespace(ymd=None, help=0, h=0)
    usage: cal.py [--help] [-h] [YMD]
    cal.py: error: not implemented
    + exit 2
    $

    $ bin/argdoc.py --rip argdoc bin/cal.py >bin/p.py
    $ python3 bin/p.py
    Namespace(ymd=None, help=0, h=0)
    usage: cal.py [--help] [-h] [YMD]
    cal.py: error: not implemented
    + exit 2
    $

    $ rm -fr bin/p.py
    $

Clean up

    $ rm -fr ../pybashish/bin/argdoc.pyc
    $ rm -fr ../pybashish/bin/pybashish.pyc
    $


# copied from:  git clone https://github.com/pelavarre/pybashish.git
