Type some line of CSP, press Return to see it run
Such as:  coin → choc → coin → choc → STOP
Press ⌃D EOF or ⌃C SIGINT or ⌃\ SIGQUIT to quit

??  #

??  # examples from the help lines

??  #

??

??  tick → STOP
⟨tick, STOP⟩

??  tick → tick → STOP
⟨tick, tick, STOP⟩

??  CLOCK = (tick → tock → CLOCK)

??  CLOCK
⟨tick, tock, tick, tock, tick, tock, CLOCK, ...⟩

??

??

??  #

??  # more examples from us

??  #

??

??  CLOCK = μ X : {tick, tock} • (tick → tock → X)

??  CLOCK
⟨tick, tock, tick, tock, tick, tock, CLOCK, ...⟩

??

??  HER.WALTZ = (
(>      her.right.back → her.left.hook.back → her.right.close →
→>      her.left.forward → her.right.hook.forward → her.left.close →
→>      HER.WALTZ)

??  HIS.WALTZ = (
(>      his.left.forward → his.right.hook.forward → his.left.close →
→>      his.right.back → his.left.hook.back → his.right.close →
→>      HIS.WALTZ)

??  HER.WALTZ
⟨her.right.back, her.left.hook.back, her.right.close, her.left.forward, her.right.hook.forward, her.left.close, her.right.back, her.left.hook.back, her.right.close, her.left.forward, her.right.hook.forward, her.left.close, her.right.back, her.left.hook.back, her.right.close, her.left.forward, her.right.hook.forward, her.left.close, HER.WALTZ, ...⟩

??  HIS.WALTZ
⟨his.left.forward, his.right.hook.forward, his.left.close, his.right.back, his.left.hook.back, his.right.close, his.left.forward, his.right.hook.forward, his.left.close, his.right.back, his.left.hook.back, his.right.close, his.left.forward, his.right.hook.forward, his.left.close, his.right.back, his.left.hook.back, his.right.close, HIS.WALTZ, ...⟩

??

??

??

??  #

??  # Chapter 1:  Processes

??  #

??

??

??  # 1.1.1 Prefix

??

??  coin → STOP  # 1.1.1 X1
⟨coin, STOP⟩

??  coin → choc → coin → choc → STOP  # 1.1.1 X2
⟨coin, choc, coin, choc, STOP⟩

??

??  CTR = (right → up → right → right → STOP)  # 1.1.1 X3

??  CTR
⟨right, up, right, right, STOP⟩

??  x → y  # meaningless per process name 'y' is not upper case 'Y'
cspsh.py: error: CspError: process name 'y' is not upper case 'Y'

??  P → Q  # meaningless per event name 'P' is not lower case 'p'
cspsh.py: error: CspError: event name 'P' is not lower case 'p'

??  x → (y → STOP)
⟨x, y, STOP⟩

??

??

??  # 1.1.2 Recursion

??

??  CLOCK = (tick → CLOCK)

??  CLOCK
⟨tick, tick, tick, CLOCK, ...⟩

??

??  CLOCK = (tick → tick → tick → CLOCK)

??  CLOCK
⟨tick, tick, tick, tick, tick, tick, tick, tick, tick, CLOCK, ...⟩

??

??  CLOCK = μ X : {tick} • (tick → X)  # 1.1.2 X1

??  CLOCK
⟨tick, tick, tick, CLOCK, ...⟩

??

??  VMS = (coin → (choc → VMS))  # 1.1.2 X2

??  VMS
⟨coin, choc, coin, choc, coin, choc, VMS, ...⟩

??

??  CH5A = (in5p → out2p → out1p → out2p → CH5A)  # 1.1.2 X3

??  CH5A
⟨in5p, out2p, out1p, out2p, in5p, out2p, out1p, out2p, in5p, out2p, out1p, out2p, CH5A, ...⟩

??

??  CH5B = (in5p → out1p → out1p → out1p → out2p → CH5B)  # 1.1.2 X4

??  CH5B
⟨in5p, out1p, out1p, out1p, out2p, in5p, out1p, out1p, out1p, out2p, in5p, out1p, out1p, out1p, out2p, CH5B, ...⟩

??

??

??  # 1.1.3 Choice

??

??  (up → STOP | right → right → up → STOP)  # 1.1.3 X1
⟨
    ⟨up, STOP⟩
    ⟨right, right, up, STOP⟩
⟩

??

??  CH5C = in5p → (  # 1.1.3 X2
(>      out1p → out1p → out1p → out2p → CH5C |
|>      out2p → out1p → out2p → CH5C)

??  CH5C
⟨in5p,
    ⟨out1p, out1p, out1p, out2p, CH5C, . . .⟩
    ⟨out2p, out1p, out2p, in5p,
        ⟨out1p, out1p, out1p, out2p, CH5C, . . .⟩
        ⟨out2p, out1p, out2p, in5p,
            ⟨out1p, out1p, out1p, out2p, CH5C, . . .⟩
            ⟨out2p, out1p, out2p, CH5C, ...⟩
        ⟩
    ⟩
⟩

??

??  (x → P | y → Q)
⟨
    ⟨x, P!⟩
    ⟨y, Q!⟩
⟩

??

??  VMCT = μ X • (coin → (choc → X | toffee → X))  # 1.1.3 X3

??  VMCT
⟨coin,
    ⟨choc, VMCT, . . .⟩
    ⟨toffee, coin,
        ⟨choc, VMCT, . . .⟩
        ⟨toffee, coin,
            ⟨choc, VMCT, . . .⟩
            ⟨toffee, VMCT, ...⟩
        ⟩
    ⟩
⟩

??

??  VMC = (in2p → (large → VMC |  # 1.1.3 X4
|>                 small → out1p → VMC) |
|>         in1p → (small → VMC |
|>                 in1p → (large → VMC |
|>                         in1p → STOP)))

??  VMC
⟨
    ⟨in2p,
        ⟨large, VMC, . . .⟩
        ⟨small, out1p,
            ⟨in2p,
                ⟨large, VMC, . . .⟩
                ⟨small, out1p,
                    ⟨in2p,
                        ⟨large, VMC, . . .⟩
                        ⟨small, out1p, VMC, ...⟩
                    ⟩
                    ⟨in1p,
                        ⟨small, VMC, . . .⟩
                        ⟨in1p,
                            ⟨large, VMC, . . .⟩
                            ⟨in1p, STOP⟩
                        ⟩
                    ⟩
                ⟩
            ⟩
            ⟨in1p,
                ⟨small, VMC, . . .⟩
                ⟨in1p,
                    ⟨large, VMC, . . .⟩
                    ⟨in1p, STOP⟩
                ⟩
            ⟩
        ⟩
    ⟩
    ⟨in1p,
        ⟨small, VMC, . . .⟩
        ⟨in1p,
            ⟨large, VMC, . . .⟩
            ⟨in1p, STOP⟩
        ⟩
    ⟩
⟩

??

??  VMCRED = μ X • (coin → choc → X | choc → coin → X)  # 1.1.3 X5

??  VMCRED
⟨
    ⟨coin, choc, VMCRED, . . .⟩
    ⟨choc, coin,
        ⟨coin, choc, VMCRED, . . .⟩
        ⟨choc, coin,
            ⟨coin, choc, VMCRED, . . .⟩
            ⟨choc, coin, VMCRED, ...⟩
        ⟩
    ⟩
⟩

??

??  VMS2 = (coin → VMCRED)  # 1.1.3 X6

??  VMS2
⟨coin,
    ⟨coin, choc, VMCRED, . . .⟩
    ⟨choc, coin,
        ⟨coin, choc, VMCRED, . . .⟩
        ⟨choc, coin,
            ⟨coin, choc, VMCRED, . . .⟩
            ⟨choc, coin, VMCRED, ...⟩
        ⟩
    ⟩
⟩

??

??  COPYBIT = μ X • (in.0 → out.0 → X |  # 1.1.3 X7
|>                   in.1 → out.1 → X)

??  COPYBIT
⟨
    ⟨in.0, out.0, COPYBIT, . . .⟩
    ⟨in.1, out.1,
        ⟨in.0, out.0, COPYBIT, . . .⟩
        ⟨in.1, out.1,
            ⟨in.0, out.0, COPYBIT, . . .⟩
            ⟨in.1, out.1, COPYBIT, ...⟩
        ⟩
    ⟩
⟩

??

??  (x → P | y → Q | z → R)
⟨
    ⟨x, P!⟩
    ⟨y, Q!⟩
    ⟨z, R!⟩
⟩

??  (x → P | x → Q)  # meaningless per choices not distinct: ['x', 'x']
cspsh.py: error: CspError: choices not distinct: ['x', 'x']

??  (x → P | y)  # meaningless per '| y)' is not '| y → Q'
cspsh.py: warning: gave up before reading: y )
cspsh.py: error: CspError: '| y → Q' has meaning, '| y )' does not

??  (x → P) | (y → Q)  # meaningless per | is not an operator on processes
cspsh.py: error: CspError: gave up before reading:  |  ( y → Q )

??  (x → P | (y → Q | z → R))
cspsh.py: warning: gave up before reading:  ( y → Q | z → R )  )
cspsh.py: error: CspError: '| y → Q' has meaning, '| ( y' does not

??

??  # RUN-A = (x:A → RUN-A)  # 1.1.3 X8

??

??

??  # 1.1.4 Mutual recursion

??

??  # αDD = αO = αL = {setorange, setlemon, orange, lemon}

??

??  DD = (setorange → O | setlemon → L)  # 1.1.4 X1

??  O = (orange → O | setlemon → L | setorange → O)

??  L = (lemon → L | setorange → O | setlemon → L)

??

??  DD
⟨
    ⟨setorange,
        ⟨orange, O, . . .⟩
        ⟨setlemon,
            ⟨lemon, L, . . .⟩
            ⟨setorange, O, . . .⟩
            ⟨setlemon,
                ⟨lemon, L, . . .⟩
                ⟨setorange, O, . . .⟩
                ⟨setlemon,
                    ⟨lemon, L, . . .⟩
                    ⟨setorange, O, . . .⟩
                    ⟨setlemon, L, ...⟩
                ⟩
            ⟩
        ⟩
        ⟨setorange,
            ⟨orange, O, . . .⟩
            ⟨setlemon, L, . . .⟩
            ⟨setorange,
                ⟨orange, O, . . .⟩
                ⟨setlemon, L, . . .⟩
                ⟨setorange, O, ...⟩
            ⟩
        ⟩
    ⟩
    ⟨setlemon, L, ...⟩
⟩

??

??  CT0 = (up → CT1 | around → CT0)  # 1.1.4 X2

??  CT1 = (up → CT2 | down → CT0)

??  CT2 = (up → CT3 | down → CT1)

??

??  CT0
⟨
    ⟨up,
        ⟨up,
            ⟨up, CT3!⟩
            ⟨down,
                ⟨up, CT2, . . .⟩
                ⟨down,
                    ⟨up, CT1, . . .⟩
                    ⟨around,
                        ⟨up, CT1, . . .⟩
                        ⟨around, CT0, ...⟩
                    ⟩
                ⟩
            ⟩
        ⟩
        ⟨down, CT0, ...⟩
    ⟩
    ⟨around, CT0, ...⟩
⟩

??

??  CT0 = (around → CT0 | up → CT1)  # 1.1.4 X2  # Variation B

??  CT1 = (down → CT0 | up → CT2)

??  CT2 = (down → CT1 | up → CT3)

??

??  CT0
⟨
    ⟨around, CT0, . . .⟩
    ⟨up,
        ⟨up,
            ⟨down,
                ⟨down, CT0, . . .⟩
                ⟨up,
                    ⟨up, CT3!⟩
                    ⟨down,
                        ⟨up, CT2, . . .⟩
                        ⟨down,
                            ⟨up, CT1, . . .⟩
                            ⟨around,
                                ⟨up, CT1, . . .⟩
                                ⟨around,
                                    ⟨up, CT1, . . .⟩
                                    ⟨around, CT0, ...⟩
                                ⟩
                            ⟩
                        ⟩
                    ⟩
                ⟩
            ⟩
            ⟨up, CT3!⟩
        ⟩
        ⟨down, CT0, ...⟩
    ⟩
⟩

??

??  # CT[n+1] = (up → CT[n+2] | down → CT[n])

??

??

??  # 1.2 Pictures

??

??

??  # 1.3 Laws

??

??  # (x → P | y → Q) = (y → Q | x → P)  # but our traces of these are inequal

??  (x → P | y → Q)
⟨
    ⟨x, P!⟩
    ⟨y, Q!⟩
⟩

??  (y → Q | x → P)
⟨
    ⟨y, Q!⟩
    ⟨x, P!⟩
⟩

??

??  # (x → P) ≠ STOP

??  (x → P)
⟨x, P!⟩

??  STOP
⟨STOP⟩

??

??  # L1    (x:A → P(x)) = (y:B → Q(y))  ≡  (A = B  ∧  ∀ x:A • P(x)=Q(x))

??  # L1A   STOP ≠ (d → P)

??  # L1B   (c → P) ≠ (d → Q)

??  # L1C   (c → P | d → Q) = (d → Q | c → P)

??  # L1D   (c → P) = (c → Q)  ≡  P = Q

??

??  # (coin → choc → coin → choc → STOP) ≠ (coin → STOP)  # 1.3 X1

??

??  # μ X • (coin → (choc → X | toffee → X ))  =  # 1.3 X2

??  #   μ X • (coin → (toffee → X | choc → X ))

??

??  # L2    (Y = F(Y))  ≡  (Y = μ X • F(X))  # <= FIXME: what is this??

??  # L2A   μ X • F(X) = F(μ X • F(X))  # <= FIXME: a la L2

??

??  VM1 = (coin → VM2)

??  VM2 = (choc → VM1)

??

??  VM1
⟨coin, choc, coin, choc, coin, choc, VM1, ...⟩

??  VM2
⟨choc, coin, choc, coin, choc, coin, VM2, ...⟩

??  VMS
⟨coin, choc, coin, choc, coin, choc, VMS, ...⟩

??

??  # L3    if (∀ i:S • (Xi = F(i, X )  ∧  Yi = F(i, Y))) then X = Y  # <= FIXME: a la L2

??

??

??  # 1.4  Implementation of processes

??

??  # Bleep, Label, Choice2, Menu, Interact, Cons, Car

??

??

??  # 1.5 Traces

??

??  # first 4 events of VMS  # 1.5 X1

??  # first 3 events of VMS  # 1.5 X2

??  # first 0 events of any process, even STOP  # 1.5 X3

??  # all traces of <= 2 events at VMC  # 1.5 X4

??  # ⟨in1p, in1p, in1p⟩ ends the only trace it begins, because it STOP's  # 1.5 X5

??

??

??  # 1.6 Operations on traces

??

??  # 1.6.1 Catenation  # FIXME: math unicode that doesn't paste

??  # 1.6.2 Restriction

??  # 1.6.3 Head and tail

??  # 1.6.4 Star

??  # 1.6.5 Ordering

??  # 1.6.6 Length

??

??  # 1.7 Implementation of traces

??

??  # 1.8 Traces of a process

??  # 1.8.1 Laws [of traces]

??  # 1.8.2 Implementation

??

??  # 1.8.3 After

??

??  # 1.9 More operations on traces

??  # 1.9.1 Change of symbol

??  # 1.9.2 Catenation [continued from 1.6.1]

??  # 1.9.3 Interleaving

??  # 1.9.4 Subscription

??  # 1.9.5 Reversal

??  # 1.9.6 Selection

??  # 1.9.7 Composition

??

??  # 1.10 Specifications

??  # 1.10.1 Satisfaction

??  # 1.10.2 Proofs

??

??

??

??  #

??  # Chapter 2:  Concurrency

??  #

??
